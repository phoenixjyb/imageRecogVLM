flowchart TD
    A[üöÄ Start VLM Object Recognition System] --> B[üé§ Choose Input Mode]
    B --> C{Input Type?}
    
    %% Input Path
    C -->|Voice| D[üéôÔ∏è Voice Input]
    C -->|Text| E[‚å®Ô∏è Text Input]
    
    D --> F[üîß Calibrate Microphone]
    F --> G[üî¥ Record Audio]
    G --> H[üîç Speech Recognition]
    H --> I{Recognition Success?}
    I -->|Yes| J[üìù Display Recognized Text]
    I -->|No| K[‚ùå Fallback to Text Input]
    K --> E
    J --> L[üåè Check for Chinese Text]
    E --> L
    
    L --> M{Contains Chinese?}
    M -->|Yes| N[üîÑ Translate to English]
    M -->|No| O[üéØ Extract Object Name]
    N --> O
    
    %% VLM Selection
    O --> P[ü§ñ Choose VLM Provider]
    P --> Q{Which Provider?}
    
    Q -->|1| R[‚òÅÔ∏è Grok-4 API]
    Q -->|2| S[‚òÅÔ∏è Qwen-VL-Max API]
    Q -->|3| T[üñ•Ô∏è Local LLaVA]
    
    %% API Key Validation
    R --> U{XAI API Key Available?}
    S --> V{DashScope API Key Available?}
    T --> W{Ollama Service Running?}
    
    U -->|No| X[‚ùå Error: Missing API Key]
    V -->|No| X
    W -->|No| Y[‚ùå Error: Ollama Not Available]
    
    U -->|Yes| Z[üì∏ Load & Process Image]
    V -->|Yes| Z
    W -->|Yes| Z
    
    %% Image Processing
    Z --> AA[üìê Get Original Dimensions]
    AA --> BB{Resize Image?}
    BB -->|Yes| CC[üîÑ Resize with Aspect Ratio]
    BB -->|No| DD[‚úÖ Use Original Resolution]
    CC --> EE[üì¶ Encode to Base64]
    DD --> EE
    
    %% Prompt Generation
    EE --> FF[üìù Build VLM Prompt]
    FF --> GG{Which Prompt Type?}
    GG -->|Grok| HH[üöÄ Build Grok Prompt<br/>Table Format: H|V|ID]
    GG -->|Qwen| II[üß† Build Qwen Prompt<br/>Table Format: H|V|ID]
    GG -->|LLaVA| JJ[üè† Build Local Prompt<br/>Center Point Format]
    
    %% API Calls
    HH --> KK[üåê Call Grok-4 API]
    II --> LL[üåê Call Qwen API]
    JJ --> MM[üñ•Ô∏è Call Local LLaVA API]
    
    %% API Processing
    KK --> NN[üì° HTTP Request with Retry Logic]
    LL --> OO[üì° OpenAI-Compatible Request]
    MM --> PP[üì° Ollama Local Request]
    
    NN --> QQ{API Success?}
    OO --> QQ
    PP --> QQ
    
    QQ -->|No| RR[‚ùå API Error]
    QQ -->|Yes| SS[üìÑ Extract Response Content]
    
    %% Response Parsing
    SS --> TT[üîç Parse Coordinates]
    TT --> UU{Response Format?}
    
    UU -->|Table Format| VV[üìä Parse Table: H|V|ID]
    UU -->|Natural Language| WW[üó£Ô∏è Parse Coordinate Patterns]
    UU -->|Not Found| XX[‚ùå Object Not Detected]
    
    %% Coordinate Processing
    VV --> YY[‚úÖ Extract Center Points]
    WW --> ZZ[üîÑ Convert to Center Points]
    YY --> AAA[üìê Validate Coordinates]
    ZZ --> AAA
    XX --> BBB[üìã Generate Not Found Response]
    
    AAA --> CCC{Valid Coordinates?}
    CCC -->|No| BBB
    CCC -->|Yes| DDD[üìä Scale Coordinates if Needed]
    
    DDD --> EEE[üìã Generate Success Response]
    BBB --> FFF[üì± Display Response]
    EEE --> FFF
    
    %% Output Generation
    FFF --> GGG[üîä Text-to-Speech]
    GGG --> HHH{Object Found?}
    
    HHH -->|No| III[üì∑ Show Original Image]
    HHH -->|Yes| JJJ[üé® Annotate Image with Star]
    
    JJJ --> KKK[‚≠ê Draw Star at Coordinates]
    KKK --> LLL[üìç Add Coordinate Labels]
    LLL --> MMM[üíæ Save Annotated Image]
    MMM --> NNN[üñºÔ∏è Display Annotated Image]
    
    III --> OOO[‚úÖ Process Complete]
    NNN --> OOO
    
    %% Error Handling
    X --> PPP[üîß Show Available Options]
    Y --> PPP
    RR --> QQQ[üîÑ Retry or Fallback]
    PPP --> OOO
    QQQ --> OOO
    
    %% Styling
    classDef startEnd fill:#e1f5fe,stroke:#01579b,stroke-width:3px
    classDef input fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef process fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef decision fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef api fill:#e3f2fd,stroke:#0277bd,stroke-width:2px
    classDef output fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef error fill:#ffebee,stroke:#c62828,stroke-width:2px
    
    class A,OOO startEnd
    class D,E,F,G,H,J,K input
    class AA,BB,CC,DD,EE,FF,TT,YY,ZZ,AAA,DDD process
    class C,I,M,Q,U,V,W,BB,GG,UU,CCC,HHH decision
    class KK,LL,MM,NN,OO,PP api
    class FFF,GGG,JJJ,KKK,LLL,MMM,NNN,III output
    class X,Y,RR,XX,BBB,PPP,QQQ error