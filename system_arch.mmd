---
title: VLM Image Recognition System Architecture
---
flowchart TD
    %% Input Layer
    A["`🖼️ **Input Image**
    (JPG/PNG)`"] --> B{"`📏 **Image Processing**
    Resize & Quality Control`"}
    
    %% Image Processing
    B --> C["`📐 **Calculate Dimensions**
    RESIZE_WIDTH: 256px
    LOCAL_RESIZE_COEFFICIENT: 1.0
    Maintain Aspect Ratio`"]
    
    %% Mode Selection
    C --> D{"`⚙️ **Processing Mode**
    --local flag?`"}
    
    %% Cloud Path
    D -->|Cloud Mode| E["`☁️ **X.AI Grok-4 VLM**
    API Endpoint
    Vision Analysis`"]
    
    %% Local Path
    D -->|Local Mode| F["`🏠 **Ollama LLaVA**
    Local Processing
    Proxy Bypass`"]
    
    %% API Configuration
    E --> G["`🔑 **Cloud Config**
    XAI_API_KEY
    Quality: 85
    Timeout: 30s`"]
    
    F --> H["`🔧 **Local Config**
    localhost:11434
    No Proxy
    Timeout: 60s`"]
    
    %% Processing
    G --> I["`🧠 **VLM Analysis**
    Object Detection
    Coordinate Extraction
    Confidence Scoring`"]
    
    H --> I
    
    %% Response Processing
    I --> J{"`📋 **Parse Response**
    Markdown Table Format
    Valid Coordinates?`"}
    
    J -->|Success| K["`✅ **Object Detection**
    Extract H,V Coordinates
    Parse Object Labels
    Calculate Confidence`"]
    
    J -->|Failure| L["`❌ **Error Handling**
    Log Parsing Error
    Generate Fallback Response`"]
    
    %% Coordinate Processing
    K --> M["`📍 **Coordinate Scaling**
    Scale from Processed to Original
    Maintain Aspect Ratio
    Dynamic Resolution Mapping`"]
    
    %% Visualization
    M --> N["`⭐ **Visual Markers**
    Draw Stars at Coordinates
    Annotate Object Labels
    Apply Visual Feedback`"]
    
    %% Output Generation
    N --> O["`💾 **Save Results**
    annotated_output.jpg
    Preserve Original + Markers`"]
    
    L --> P["`🔊 **Audio Feedback**
    Text-to-Speech
    Result Announcement`"]
    
    O --> P
    
    %% Logging
    P --> Q["`📝 **Comprehensive Logging**
    Timing Information
    Detection Results
    Error Tracking`"]
    
    %% Final Output
    Q --> R["`📤 **Output Complete**
    Console Results
    Annotated Image
    Audio Confirmation`"]

    %% Subgraph for Cloud Processing
    subgraph Cloud ["`☁️ **Cloud Processing Path**`"]
        E
        G
    end
    
    %% Subgraph for Local Processing
    subgraph Local ["`🏠 **Local Processing Path**`"]
        F
        H
    end
    
    %% Subgraph for Core Processing
    subgraph Core ["`🎯 **Core VLM Processing**`"]
        I
        J
        K
        M
    end
    
    %% Subgraph for Output Pipeline
    subgraph Output ["`📊 **Output Pipeline**`"]
        N
        O
        P
        Q
        R
    end

    %% Chinese Translation Engine
    subgraph Chinese_Translation_Engine ["`🇨🇳 **Chinese Translation Engine**`"]
        D["`🔄 **Chinese Translation**
    Detect Language
    Translate to English`"]
        E["`📚 **Pattern Matching**
    Analyze Sentence Structure
    Match with Object Dictionary`"]
        F["`🔤 **Object Translation**
    Translate Detected Objects
    Map to English Equivalents`"]
        
        II["`📋 **Command Patterns**
    请.*?拿.*?给我
    帮我.*?拿.*
    找.*?给我`"]
        
        JJ["`📖 **Object Dictionary**
    可乐→coke
    苹果→apple
    书→book`"]
        
        D --> E
        E --> F
        II --> E
        JJ --> F
    end
    
    %% VLM Processing Pipeline
    subgraph VLM_Processing_Pipeline ["`🚀 **VLM Processing Pipeline**`"]
        K["`☁️ **Grok-4 Cloud**
    High Accuracy
    English Optimized`"]
        L["`☁️ **Qwen-VL Cloud**
    Chinese Optimized
    Good Accuracy`"]
        M["`🏠 **LLaVA Local**
    Privacy Focused
    Free Processing`"]
        
        FF["`🔍 **Grok-4 API**
    Analyze Image
    Generate Response`"]
        GG["`🔍 **Qwen-VL API**
    Analyze Image
    Generate Response`"]
        HH["`🔍 **LLaVA Local API**
    Analyze Image
    Generate Response`"]
        
        K --> FF
        L --> GG
        M --> HH
    end
    
    %% Image Processing
    subgraph Image_Processing ["`🖼️ **Image Processing**`"]
        Q["`📐 **Original Resolution**
    95% Quality
    Base64 Encoding`"]
        R["`📏 **Local Resize**
    85% Quality
    Optimized Size`"]
        
        KK["`🔄 **Base64 Decode**
    Convert to Image
    Prepare for VLM`"]
        LL["`📏 **Image Resizing**
    Adjust to VLM Specs
    Maintain Quality`"]
        
        Q --> KK
        R --> LL
    end
    
    %% Output Generation
    subgraph Output_Generation ["`📤 **Output Generation**`"]
        AA["`🔊 **Text-to-Speech**
    Announce Results
    Object Found/Not Found`"]
        BB["`⭐ **Visual Annotation**
    Overlay Stars
    Annotate Objects`"]
        CC["`💻 **macOS Say Command**
    Execute TTS
    System Voice`"]
        DD["`🟡 **Yellow Star Overlay**
    Draw Stars on Image
    Indicate Coordinates`"]
        EE["`🖥️ **Image Display**
    Show Processed Image
    With Annotations`"]
        
        AA --> CC
        BB --> DD
        DD --> EE
    end
    
    %% Styling
    classDef input fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef processing fill:#f3e5f5,stroke:#8e24aa,stroke-width:2px
    classDef cloud fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef local fill:#e8f5e9,stroke:#388e3c,stroke-width:2px
    classDef core fill:#fce4ec,stroke:#d81b60,stroke-width:2px
    classDef output fill:#f9fbe7,stroke:#689f38,stroke-width:2px
    classDef error fill:#ffebee,stroke:#f44336,stroke-width:2px
    
    class A,B,C input
    class D,E,F processing
    class G cloud
    class H local
    class I,J,K,M core
    class N,O,P,Q,R output
    class L error
```
