---
title: VLM Image Recognition System Architecture
---
flowchart TD
    %% Input Layer
    A["`üñºÔ∏è **Input Image**
    (JPG/PNG)`"] --> B{"`üìè **Image Processing**
    Resize & Quality Control`"}
    
    %% Image Processing
    B --> C["`üìê **Calculate Dimensions**
    RESIZE_WIDTH: 256px
    LOCAL_RESIZE_COEFFICIENT: 1.0
    Maintain Aspect Ratio`"]
    
    %% Mode Selection
    C --> D{"`‚öôÔ∏è **Processing Mode**
    --local flag?`"}
    
    %% Cloud Path
    D -->|Cloud Mode| E["`‚òÅÔ∏è **X.AI Grok-4 VLM**
    API Endpoint
    Vision Analysis`"]
    
    %% Local Path
    D -->|Local Mode| F["`üè† **Ollama LLaVA**
    Local Processing
    Proxy Bypass`"]
    
    %% API Configuration
    E --> G["`üîë **Cloud Config**
    XAI_API_KEY
    Quality: 85
    Timeout: 30s`"]
    
    F --> H["`üîß **Local Config**
    localhost:11434
    No Proxy
    Timeout: 60s`"]
    
    %% Processing
    G --> I["`üß† **VLM Analysis**
    Object Detection
    Coordinate Extraction
    Confidence Scoring`"]
    
    H --> I
    
    %% Response Processing
    I --> J{"`üìã **Parse Response**
    Markdown Table Format
    Valid Coordinates?`"}
    
    J -->|Success| K["`‚úÖ **Object Detection**
    Extract H,V Coordinates
    Parse Object Labels
    Calculate Confidence`"]
    
    J -->|Failure| L["`‚ùå **Error Handling**
    Log Parsing Error
    Generate Fallback Response`"]
    
    %% Coordinate Processing
    K --> M["`üìç **Coordinate Scaling**
    Scale from Processed to Original
    Maintain Aspect Ratio
    Dynamic Resolution Mapping`"]
    
    %% Visualization
    M --> N["`‚≠ê **Visual Markers**
    Draw Stars at Coordinates
    Annotate Object Labels
    Apply Visual Feedback`"]
    
    %% Output Generation
    N --> O["`üíæ **Save Results**
    annotated_output.jpg
    Preserve Original + Markers`"]
    
    L --> P["`üîä **Audio Feedback**
    Text-to-Speech
    Result Announcement`"]
    
    O --> P
    
    %% Logging
    P --> Q["`üìù **Comprehensive Logging**
    Timing Information
    Detection Results
    Error Tracking`"]
    
    %% Final Output
    Q --> R["`üì§ **Output Complete**
    Console Results
    Annotated Image
    Audio Confirmation`"]

    %% Subgraph for Cloud Processing
    subgraph Cloud ["`‚òÅÔ∏è **Cloud Processing Path**`"]
        E
        G
    end
    
    %% Subgraph for Local Processing
    subgraph Local ["`üè† **Local Processing Path**`"]
        F
        H
    end
    
    %% Subgraph for Core Processing
    subgraph Core ["`üéØ **Core VLM Processing**`"]
        I
        J
        K
        M
    end
    
    %% Subgraph for Output Pipeline
    subgraph Output ["`üìä **Output Pipeline**`"]
        N
        O
        P
        Q
        R
    end

    %% Styling
    classDef input fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef processing fill:#f3e5f5,stroke:#8e24aa,stroke-width:2px
    classDef cloud fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef local fill:#e8f5e9,stroke:#388e3c,stroke-width:2px
    classDef core fill:#fce4ec,stroke:#d81b60,stroke-width:2px
    classDef output fill:#f9fbe7,stroke:#689f38,stroke-width:2px
    classDef error fill:#ffebee,stroke:#f44336,stroke-width:2px
    
    class A,B,C input
    class D processing
    class E,G cloud
    class F,H local
    class I,J,K,M core
    class N,O,P,Q,R output
    class L error
